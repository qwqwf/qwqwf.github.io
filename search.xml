<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>『DP』做题记录</title>
    <url>/2023/10/09/%E3%80%8EDP%E3%80%8F%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="AGC046D"><a href="#AGC046D" class="headerlink" title="AGC046D"></a><a href="https://www.luogu.com.cn/problem/AT_agc046_d">AGC046D</a></h4><p>发现一个当前操作后的状态可以用一个三元组 $(i,j,k)$ 表示 $(i,n]$ 这段后缀没被删除，有 $j$ 个 $0$ 可以随便放，$k$ 个 $1$ 可以随便放。</p>
<p>考虑到对于一个最终的 $01$ 串可能对应多个三元组 $(i,j,k)$，考虑构造 $01$ 串到 $(i,j,k)$ 的单射。</p>
<p>有一个比较自然的想法是拿最终 $01$ 串的子序列和初始串的后缀做匹配。</p>
<p>假设匹配到 $(i,n]$，还剩下 $j$ 个 $0$ 没有匹配，$k$ 个 $1$ 没有匹配，那么这个 $01$ 串单射到 $(i,j,k)$ 这个三元组。</p>
<p>不难发现这是满足单射定义的。</p>
<p>现在问题有两个：</p>
<ol>
<li>如何算 $(i,j,k)$ 三元组可以被取到。</li>
<li>如何算有多少个 $01$ 串单射到 $(i,j,k)$ 上。</li>
</ol>
<p>实际上都是不难 dp 的，转移都是容易的，这部分留给读者思考。</p>
<p>Code：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;s+<span class="number">1</span>;n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">g[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=f[n][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span>(<span class="type">int</span> j=n;~j;j--) <span class="keyword">for</span>(<span class="type">int</span> k=n;~k;k--)&#123;</span><br><span class="line">    g[i][j][k]|=g[i<span class="number">-1</span>][j][k]|g[i][j+<span class="number">1</span>][k]|g[i][j][k+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;(s[i]==<span class="string">&#x27;0&#x27;</span>||s[i<span class="number">-1</span>]==<span class="string">&#x27;0&#x27;</span>)&amp;&amp;j) g[i][j][k]|=g[i<span class="number">-2</span>][j<span class="number">-1</span>][k];</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;(s[i]==<span class="string">&#x27;1&#x27;</span>||s[i<span class="number">-1</span>]==<span class="string">&#x27;1&#x27;</span>)&amp;&amp;k) g[i][j][k]|=g[i<span class="number">-2</span>][j][k<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span>(j&amp;&amp;s[i]==<span class="string">&#x27;0&#x27;</span>) g[i][j][k]|=g[i<span class="number">-1</span>][j<span class="number">-1</span>][k+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(k&amp;&amp;s[i]==<span class="string">&#x27;1&#x27;</span>) g[i][j][k]|=g[i<span class="number">-1</span>][j+<span class="number">1</span>][k<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=n;j++) <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=n;k++)&#123;</span><br><span class="line">    f[i<span class="number">-1</span>][j][k]=(f[i<span class="number">-1</span>][j][k]+f[i][j][k])%mod;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>) f[i][j+<span class="number">1</span>][k]=(f[i][j+<span class="number">1</span>][k]+f[i][j][k])%mod;</span><br><span class="line">    <span class="keyword">else</span> f[i][j][k+<span class="number">1</span>]=(f[i][j][k+<span class="number">1</span>]+f[i][j][k])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="keyword">for</span>(<span class="type">int</span> j=n;~j;j--) <span class="keyword">for</span>(<span class="type">int</span> k=n;~k;k--) <span class="keyword">if</span>(g[i][j][k]) ans=(ans+f[i][j][k])%mod;</span><br><span class="line">cout&lt;&lt;(ans+mod<span class="number">-1</span>)%mod&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="CF1097H"><a href="#CF1097H" class="headerlink" title="CF1097H"></a><a href="https://www.luogu.com.cn/problem/CF1097H">CF1097H</a></h4><p>问题很复杂的情况下，先考虑较为简单的情况。</p>
<p>讨论一下 $|B|&#x3D;1$ 怎么做：</p>
<p>$f_{i,j}$ 表示 $M_{+\infty}$ 的前缀 $[0,d^i)$ 集体加 $j$ 的答案。</p>
<p>不难得出，$f_{i,j}&#x3D;\sum_{k&#x3D;1}^{d} f_{i-1,(j+gen_{k}) \bmod \ a}$</p>
<p>答案差分一下就可以求了。</p>
<p>$|B|&gt;1$，考虑类似 <a href="https://www.luogu.com.cn/problem/CF177G2">CF177G2</a> 的做法，将串匹配分治做，对于子问题类似上述 dp 做即可，而问题在于两个子问题间对答案的贡献。</p>
<p>这个维护方式是很有启发性的，比较新鲜的维护方式。</p>
<p>就是考虑一个子问题内部维护两个数组，$pre_i,suf_i$ 分别表示对于 $b$ 数列去掉前 $i$ 个元素和当前整个子问题的前缀<strong>是否能匹配</strong>，对于 $b$ 数列之保留前 $i$ 个元素和当前整个子问题的后缀<strong>是否能匹配</strong>。</p>
<p>注意两个点：</p>
<ol>
<li><p>这个状态是是否，也就是说如果我能通过位移等简单二进制运算维护，那么可以通过 bitset 优化复杂度。</p>
</li>
<li><p>这里匹配是指，对于一个前后缀和当前剩下的 $b$ 序列按照顺序比较，若前后缀不够比较，通过补 $0$ 比较至 $b$ 全部剩下元素比较玩，而这里的比较则与题面中的比较方式无异。</p>
</li>
</ol>
<p>这部分的贡献是容易合并的，具体合并方式自行手玩或者看代码。</p>
<p>且不难发现这部分合并是可以通过 bitset 优化的，复杂度 $O(\dfrac{nmd\log_{d}r}{\omega})$。</p>
<p>代码之放下了数据维护的部分，其他内容容易写出。</p>
<p>Code：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	<span class="type">int</span> ans,len;</span><br><span class="line">	bitset&lt;N&gt; pre,suf;</span><br><span class="line">&#125;f[M][M];</span><br><span class="line"><span class="keyword">inline</span> Node <span class="keyword">operator</span> +(Node a,Node b)&#123;</span><br><span class="line">	<span class="keyword">if</span>(!a.len) <span class="keyword">return</span> b;</span><br><span class="line">	Node res;res.ans=a.ans+b.ans;</span><br><span class="line">	res.len=a.len+b.len;res.pre=a.pre,res.suf=b.suf;</span><br><span class="line">	<span class="keyword">if</span>(a.len&lt;n<span class="number">-1</span>) res.pre&amp;=(b.pre&gt;&gt;a.len)|(e&lt;&lt;n<span class="number">-1</span>-a.len);</span><br><span class="line">	<span class="keyword">if</span>(b.len&lt;n<span class="number">-1</span>) res.suf&amp;=(a.suf&lt;&lt;b.len)|(e&gt;&gt;n<span class="number">-1</span>-b.len);</span><br><span class="line">	<span class="keyword">if</span>(res.len&gt;=n)&#123;</span><br><span class="line">		bitset&lt;N&gt; u=a.suf&amp;b.pre;</span><br><span class="line">		<span class="keyword">if</span>(a.len&lt;n<span class="number">-1</span>) u&amp;=(e&gt;&gt;n<span class="number">-1</span>-a.len);</span><br><span class="line">		<span class="keyword">if</span>(b.len&lt;n<span class="number">-1</span>) u&amp;=(e&lt;&lt;n<span class="number">-1</span>-b.len);</span><br><span class="line">		res.ans+=u.<span class="built_in">count</span>();</span><br><span class="line">	&#125;<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>『网络流』学习笔记</title>
    <url>/2023/10/07/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
    <content><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h4 id="empty-now"><a href="#empty-now" class="headerlink" title="empty now."></a>empty now.</h4><h2 id="经典模型总结"><a href="#经典模型总结" class="headerlink" title="经典模型总结"></a>经典模型总结</h2><h4 id="最小割点"><a href="#最小割点" class="headerlink" title="最小割点"></a>最小割点</h4><p>即问题求解删点的贡献为 $w_i$ 下最小割。</p>
<p>经典拆点，考虑将点拆成 $u_{in},u_{out}$，连 $u_{in} \xrightarrow{w_u} u_{out}$。</p>
<p>而对于原图边 $(u,v)$，连 $u_{out} \xrightarrow{+\infty} v_{in}$ 。</p>
<h4 id="集合划分模型"><a href="#集合划分模型" class="headerlink" title="集合划分模型"></a>集合划分模型</h4><p>有一个经典的模型是这样的，给定 $E,c,a,b$，求解：</p>
<p>$$\min_{x[1,2,\dots,n]} {\sum\limits_{(u,v)\in E} x_u \overline{x_v}c_{u,v}+\sum\limits_{i&#x3D;1}^{n} \left( x_ia_i+\overline{x_i}b_i \right) }$$</p>
<p>其中 $x_i&#x3D;0 &#x2F;1$，而 $\overline{x_i}$ 为取反操作。</p>
<p>考虑建模，首先对于任意 $i$ ，连 $S \xrightarrow{a_i} i \xrightarrow{b_i} T$。</p>
<p>对于 $(u,v) \in E$，连 $u \longleftrightarrow v$ 流量为 $c_{u,v}$。</p>
<p>一些奇怪的问题：</p>
<ul>
<li><p>对于存在 $a_i,b_i$ 有负数的情况，考虑由于 $a_i,b_i$ 必定会有一个被选择，则考虑给 $a_i,b_i$ 同时加上一个极大值，最后贡献减去即可。</p>
</li>
<li><p>对于要求限制为 $x_u&#x3D;0 \ \text{and}  \ x_v&#x3D;1$ 对式子有 $c_{u,v}$ 的贡献，此时连<strong>单向边</strong>即可。</p>
</li>
</ul>
<p>有个变式：</p>
<p>$$\max_{x[1,2,\dots,n]} {\sum\limits_{(u,v)\in E} \left(x_ux_vc_{u,v} +\overline{x_u} \overline{x_v}c_{u,v}\right) +\sum\limits_{i&#x3D;1}^{n} \left( x_ia_i+\overline{x_i}b_i \right) }$$</p>
<p>同理的，不过考虑割掉的边表示不选：</p>
<p>$S \xrightarrow{c_{i,j}} (i,j),S \xrightarrow{a_i} i,S \xrightarrow{a_j} j$</p>
<p>$(i,j)^{\prime}\xrightarrow{c_{i,j}} T,i \xrightarrow{b_i} T ,j \xrightarrow{b_j} T$</p>
<p>$(i,j) \xrightarrow{+\infty} i,(i,j) \xrightarrow{+\infty} j,i \xrightarrow{+\infty} (i,j)^{\prime},j\xrightarrow{+\infty} (i,j)^{\prime}$</p>
<p>这是不难理解的，可以手玩一下。</p>
<h4 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h4><p>只讲建模，不讲证明，因为容易手玩。</p>
<p>$S \xrightarrow{a_i} i,a_i\geq 0$</p>
<p>$i \xrightarrow{-a_i} T,a_i&lt; 0$</p>
<p>$u \xrightarrow{+\infty} v,(u,v) \in E$</p>
<p>答案即为 $\sum\limits_{a_i\geq 0} a_{i}-c$，其中 $c$ 为最小割。</p>
<h4 id="有负环的费用流"><a href="#有负环的费用流" class="headerlink" title="有负环的费用流"></a>有负环的费用流</h4><p>考虑类比上下界费用流，先转化为无源汇，考虑钦定负费用边必定流满，此处运用到网络流<strong>反悔</strong>的特殊性质。</p>
<p>同时删除原边，加入反边，将负费用取去绝对值，最后考虑加入虚源汇点，同理上下界建模即可。</p>
<p>上下界只是应定流满下界，而此处只是应定直接流满，但是又不能直接跑费用流，因为仍然存在负环，所以直接考虑建出反边跑。</p>
<p>注意，要在虚源汇，实源汇都跑一遍，这个和上下界最大&#x2F;小流同理。</p>
<h4 id="最大费用最大流"><a href="#最大费用最大流" class="headerlink" title="最大费用最大流"></a>最大费用最大流</h4><p>费用取反，然后跑有负环的费用流即可。</p>
<h2 id="网络流24题"><a href="#网络流24题" class="headerlink" title="网络流24题"></a>网络流24题</h2><h4 id="P1251-餐巾计划问题"><a href="#P1251-餐巾计划问题" class="headerlink" title="P1251 餐巾计划问题"></a><a href="https://www.luogu.com.cn/problem/P1251">P1251 餐巾计划问题</a></h4><p>拆点，分别维护干净的毛巾和脏的毛巾。</p>
<p>建模如下：</p>
<p>$S \xrightarrow{(r_i,0)} i,i^{\prime} \xrightarrow{(r_i,0)} T,S \xrightarrow{(+\infty,p)} i^{\prime}$</p>
<p>$i \xrightarrow{(+\infty,f)} (i+m)^{\prime},i \xrightarrow{(+\infty,s)} (i+n)^{\prime}$</p>
<p>如果用了原始对偶优化复杂度就是 $O(n^2+fn\log n)$。</p>
<h4 id="P2754-CTSC1999-家园-星际转移问题"><a href="#P2754-CTSC1999-家园-星际转移问题" class="headerlink" title="P2754 [CTSC1999] 家园 &#x2F; 星际转移问题"></a><a href="https://www.luogu.com.cn/problem/P2754">P2754 [CTSC1999] 家园 &#x2F; 星际转移问题</a></h4><p>飞船停靠站点与时间挂钩，考虑运用<strong>分层图</strong>思想。</p>
<p>枚举答案 $t$，建模：</p>
<p>设 $(x,y)$ 表示时间在 $x$ 的点 $y$。</p>
<p>$S \xrightarrow{+\infty} (i,0),(i,j) \xrightarrow{+\infty} (i+1,j)$</p>
<p>$(i,u) \xrightarrow{h_j} (i+1,v)$ ，其中 $u,v$ 是 $i$ 时刻到 $i+1$ 时刻 $j$ 号飞船的边上两点。</p>
<p>可以在答案增量的后加边然后在残余网络上跑最大流。</p>
<p>复杂度？。</p>
<h4 id="P2756-飞行员配对方案问题"><a href="#P2756-飞行员配对方案问题" class="headerlink" title="P2756 飞行员配对方案问题"></a><a href="https://www.luogu.com.cn/problem/P2756">P2756 飞行员配对方案问题</a></h4><p>二分图最大匹配模板。</p>
<h4 id="P2761-软件补丁问题"><a href="#P2761-软件补丁问题" class="headerlink" title="P2761 软件补丁问题"></a><a href="https://www.luogu.com.cn/problem/P2761">P2761 软件补丁问题</a></h4><p>一个bug 有两种状态，出现或者没出现，状压每种状态，然后 dij 转移即可。</p>
<h4 id="P2762-太空飞行计划问题"><a href="#P2762-太空飞行计划问题" class="headerlink" title="P2762 太空飞行计划问题"></a><a href="https://www.luogu.com.cn/problem/P2762">P2762 太空飞行计划问题</a></h4><p>将实验和仪器都看成是点，一个实验向需要的一起连边，就是一个最大权闭合子图问题。</p>
<h4 id="P2763-试题库问题"><a href="#P2763-试题库问题" class="headerlink" title="P2763 试题库问题"></a><a href="https://www.luogu.com.cn/problem/P2763">P2763 试题库问题</a></h4><p>经典建模：</p>
<p>$S \xrightarrow{1} i,i\xrightarrow{1}n+j,n+i\xrightarrow{p_i} T$</p>
<p>其中 $i\xrightarrow{1}n+j$ 是第 $i$ 个试题选择 $j$ 类型。</p>
<p>构造方案判流满否。</p>
<h4 id="P2764-最小路径覆盖问题"><a href="#P2764-最小路径覆盖问题" class="headerlink" title="P2764 最小路径覆盖问题"></a><a href="https://www.luogu.com.cn/problem/P2764">P2764 最小路径覆盖问题</a></h4><p>DAG 不交最小链覆盖。</p>
<p>拆入点和出点，对于原图中边 $(u,v)$ 连$u_{out} \xrightarrow{+\infty} v_{in}$。</p>
<p>答案即为 $n-m$，其中 $n$ 为点数，$m$ 为最大匹配。</p>
<p>扩展：</p>
<ul>
<li><p>Dilworth 定理，偏序集中，最长反链等于最小链覆盖。</p>
</li>
<li><p>DAG 有交最小链覆盖，按照以传递闭包建出的邻接表求不交最小链覆盖即为所求。</p>
</li>
<li><p>二分图中的最小点覆盖等于最大匹配。</p>
</li>
<li><p>二分图中最小边覆盖覆盖等于最大独立集等于点数减去最小点覆盖。</p>
</li>
</ul>
<h4 id="P2765-魔术球问题"><a href="#P2765-魔术球问题" class="headerlink" title="P2765 魔术球问题"></a><a href="https://www.luogu.com.cn/problem/P2765">P2765 魔术球问题</a></h4><p>枚举答案 $i$ ，对于 $i+j&#x3D;a^2(i&gt;j)$ ，由于从小到大放，连 $i\rightarrow j$，求最小链覆盖若超过 $n$ 则 $i-1$ 为答案。</p>
<p>构造方案同上。</p>
<h4 id="P2766-最长不下降子序列问题"><a href="#P2766-最长不下降子序列问题" class="headerlink" title="P2766 最长不下降子序列问题"></a><a href="https://www.luogu.com.cn/problem/P2766">P2766 最长不下降子序列问题</a></h4><p>第一问水。</p>
<p>不能发现一个性质，设 $f_i$ 表示以 $i$ 为结尾的 LIS 长度。在我选择的子序列作为答案中，其中的一个长度为 $s$ 的子序列上，两个相邻的元素 $x,y$ 必然满足$f_x&#x3D;f_y+1(y&lt;x)$。</p>
<p>那么可以将问题转化为此类 $x,y$ 连 $y \rightarrow x$，求最多不交 $k$ 长链，同时每个点 $i$ 只能最为链上第 $p_i$ 个。</p>
<p>建模：</p>
<p>$S \xrightarrow{1} i(f_i&#x3D;1),i\xrightarrow{1}j(f_j&#x3D;f_i+1,a_i\leq a_j),i\xrightarrow{1} T(f_i&#x3D;s)$</p>
<p>跑最大流即为所求。</p>
<p>第三问同理的，只是 $S \xrightarrow{+\infty} 1,n \xrightarrow{+\infty} T(f_n&#x3D;s)$</p>
<p>注意特判 $n&#x3D;1$。</p>
<h4 id="P2770-航空路线问题"><a href="#P2770-航空路线问题" class="headerlink" title="P2770 航空路线问题"></a><a href="https://www.luogu.com.cn/problem/P2770">P2770 航空路线问题</a></h4><p>不难发现要求即为 $1_{out}$ 和 $n_{in}$ 的度数 $\leq 2$，其余点度数 $\leq 1$。</p>
<p>直接建模跑最大费用最大流即可，由于没环，直接反权值跑即可。</p>
<p>构造方案直接看是否满流即可。</p>
<h4 id="P2774-方格取数问题"><a href="#P2774-方格取数问题" class="headerlink" title="P2774 方格取数问题"></a><a href="https://www.luogu.com.cn/problem/P2774">P2774 方格取数问题</a></h4><p>黑白染色，直接求解二分图最大权独立集即可。</p>
<h4 id="P3254-圆桌问题"><a href="#P3254-圆桌问题" class="headerlink" title="P3254 圆桌问题"></a><a href="https://www.luogu.com.cn/problem/P3254">P3254 圆桌问题</a></h4><p>二分图多重匹配模板题。</p>
<p>类比二分图最大匹配的建模方式：</p>
<p>$S \xrightarrow{r_i} i,i \xrightarrow{1} j+n,j+n \xrightarrow{c_j} T$。</p>
<h4 id="P3355-骑士共存问题"><a href="#P3355-骑士共存问题" class="headerlink" title="P3355 骑士共存问题"></a><a href="https://www.luogu.com.cn/problem/P3355">P3355 骑士共存问题</a></h4><p>黑白染色，互相攻击点连边，跑二分图最大独立集即可。</p>
<h4 id="P3356-火星探险问题"><a href="#P3356-火星探险问题" class="headerlink" title="P3356 火星探险问题"></a><a href="https://www.luogu.com.cn/problem/P3356">P3356 火星探险问题</a></h4><p>拆点 $in,out$，点权转边权，对于有石子的点 $u_{in} \xrightarrow{(1,1)} u_{out},u_{in} \xrightarrow{(n-1,0)} u_{out}$。</p>
<p>对于没有石子的点 $u_{in} \xrightarrow{(n,0)} u_{out}$。</p>
<p>没环，最大费用最大流，输出方案记录一个点向下右的流量。</p>
<h4 id="P3358-最长-k-可重区间集问题"><a href="#P3358-最长-k-可重区间集问题" class="headerlink" title="P3358 最长 k 可重区间集问题"></a><a href="https://www.luogu.com.cn/problem/P3358">P3358 最长 k 可重区间集问题</a></h4><p>这题放在 P3357 之前，原因是可以理解为后者是前者的加强版。</p>
<p>考虑用将限制转化，考虑一个点可以至多被 $k$ 个区间交，那么考虑给 $k$ 个区间分组，每组中区间无交则为充要条件。</p>
<p>应定 $k$ 组可以直接建模设置流量上界 $k$，而现在是容易建模的，拆区间为两点 $L_{i},R_{i}$，设其左右端点为 $l_i,r_i$：</p>
<p>$S \xrightarrow{(1,0)}L_i,R_i\xrightarrow{(1,0)}T,T\xrightarrow{(k,0)} T^{\prime},L_i \xrightarrow{(1,r_i-l_i)}R_i$</p>
<p>$R_{i} \xrightarrow{(1,0)}L_j(r_i\leq l_j)$</p>
<p>这样建模 $m&#x3D;O(n^2)$ 直接跑肯定不够优秀。</p>
<p>考虑优化：</p>
<p>不妨将所有 $L_i,R_i$ 离散化拍到数列 $x&#x3D;{1,\dots,p}$ 上。</p>
<p>建模：</p>
<p>$S \xrightarrow{(k,0)}1,p \xrightarrow{(k,0)}T,L_i \xrightarrow{(1,r_i-l_i)}R_i$</p>
<p>$i \xrightarrow{(k,0)} i+1(i\in[1,p))$</p>
<p>$m&#x3D;O(n)$，最大费用最大流 $O(nmk)$。</p>
<h4 id="P3357-最长-k-可重线段集问题"><a href="#P3357-最长-k-可重线段集问题" class="headerlink" title="P3357 最长 k 可重线段集问题"></a><a href="https://www.luogu.com.cn/problem/P3357">P3357 最长 k 可重线段集问题</a></h4><p>可能发现就是 $x$ 维做最长 $k$ 可重区间集。</p>
<p>和 P3358 不同的是当存在一个线段平行于 $y$ 轴，则其为 $[x,x]$ 闭区间。</p>
<p>考虑拆点，$x_{in},x_{out}$</p>
<p>建模：</p>
<p>$S \xrightarrow{(k,0)}1_{in},p_{out} \xrightarrow{(k,0)}T,L_{i_{out}} \xrightarrow{(1,w_i)}R_{i_{in}}(L_i\not&#x3D;R_i),L_{i_{in}} \xrightarrow{(1,w_i)}R_{i_{out}}(L_i&#x3D;R_i)$</p>
<p>$i_{in} \xrightarrow{(k,0)} i_{out}(i\in[1,p])$</p>
<p>$i_{out} \xrightarrow{(k,0)} (i+1)_{out}(i\in[1,p))$</p>
<p>$m&#x3D;O(n)$，最大费用最大流 $O(nmk)$。</p>
<h4 id="P4009-汽车加油行驶问题"><a href="#P4009-汽车加油行驶问题" class="headerlink" title="P4009 汽车加油行驶问题"></a><a href="https://www.luogu.com.cn/problem/P4009">P4009 汽车加油行驶问题</a></h4><p>和网络流没啥关系。</p>
<p>设 $f_{i,j,k}$ 表示走到 $(i,j)$ 剩下 $k$ 个可行走单位，dij 暴力转移即可。</p>
<h4 id="P4011-孤岛营救问题"><a href="#P4011-孤岛营救问题" class="headerlink" title="P4011 孤岛营救问题"></a><a href="https://www.luogu.com.cn/problem/P4011">P4011 孤岛营救问题</a></h4><p>由于钥匙数量很少，状压 $O(nm 2^{P})$。</p>
<h4 id="P4012-深海机器人问题"><a href="#P4012-深海机器人问题" class="headerlink" title="P4012 深海机器人问题"></a><a href="https://www.luogu.com.cn/problem/P4012">P4012 深海机器人问题</a></h4><p>类比 P3356 即可。</p>
<h4 id="P4013-数字梯形问题"><a href="#P4013-数字梯形问题" class="headerlink" title="P4013 数字梯形问题"></a><a href="https://www.luogu.com.cn/problem/P4013">P4013 数字梯形问题</a></h4><p>经典拆点，点边容量为 $1$ 表示点有限制不交，边间容量为 $1$ 表示边有限制不交，否则容量赋为 $+\infty$。</p>
<p>然后跑最大费用最大流即可，无环。</p>
<h4 id="P4014-分配问题"><a href="#P4014-分配问题" class="headerlink" title="P4014 分配问题"></a><a href="https://www.luogu.com.cn/problem/P4014">P4014 分配问题</a></h4><p>二分图最小&#x2F;大权匹配。</p>
<h4 id="P4015-运输问题"><a href="#P4015-运输问题" class="headerlink" title="P4015 运输问题"></a><a href="https://www.luogu.com.cn/problem/P4015">P4015 运输问题</a></h4><p>同上。</p>
<h4 id="P4016-负载平衡问题"><a href="#P4016-负载平衡问题" class="headerlink" title="P4016 负载平衡问题"></a><a href="https://www.luogu.com.cn/problem/P4016">P4016 负载平衡问题</a></h4><p>类似上下界网络流，算出 $avg$，若 $a_i&lt;avg$，连 $S\xrightarrow{(avg-a_i,0)}i$，若 $a_i&gt;avg$，连 $i\xrightarrow{(a_i-avg,0)}T$</p>
<p>相邻边连容量为 $+\infty$ 费用为 $1$ 的边。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h4 id="P2805-NOI2009-植物大战僵尸"><a href="#P2805-NOI2009-植物大战僵尸" class="headerlink" title="[P2805 NOI2009] 植物大战僵尸"></a><a href="https://www.luogu.com.cn/problem/P2805">[P2805 NOI2009] 植物大战僵尸</a></h4><p>考虑将保护关系表示为，选什么之前必定要选什么，这和选一个点之前一定要右侧点限制同理。</p>
<p>如果选 $u$ 前必须选 $v$ 那么连 $u \rightarrow v$，然后将环去掉后跑最大权闭合子图即可。</p>
]]></content>
      <tags>
        <tag>网络流</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
